{"version":3,"file":"index.js","sources":["../../../src/dom/getHTMLFromStr/index.js"],"sourcesContent":["import { parse } from \"node-html-parser\";\r\nimport ow from \"ow\";\r\n\r\n\r\n/**\r\n * Get parsed HTML from string and returns NodeList that include elements and text\r\n * @param str{String} - source string\r\n * @param type{DOMParserSupportedType} - content type (\"application/xhtml+xml\", \"application/xml\", \"image/svg+xml\", \"text/html\" (by default) or \"text/xml\"\r\n * @return {NodeList}\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\r\n * @example\r\n * // How to get parsed HTML elements from string?\r\n * Array.from(getHTMLFromStr(`\r\n *   <p>Hello world!</p>\r\n *   <p>Hello world!</p>\r\n * `)); // returns array of two paragraph nodes\r\n */\r\nconst getHTMLFromStr = (str = \"\", type = \"text/html\") => {\r\n\r\n  ow(str, ow.string.not.empty);\r\n  ow(type, ow.string.is(value => [ \"application/xhtml+xml\", \"application/xml\", \"image/svg+xml\", \"text/html\" ].includes(value)));\r\n\r\n  if (typeof DOMParser === \"undefined\") {\r\n    return parse(str).querySelectorAll(\"*\");\r\n  } else {\r\n    return new DOMParser().parseFromString(str, type).body.childNodes;\r\n  }\r\n};\r\n\r\nexport {\r\n  getHTMLFromStr\r\n};\r\n"],"names":["getHTMLFromStr","str","type","ow","string","not","empty","is","value","includes","DOMParser","parse","querySelectorAll","parseFromString","body","childNodes"],"mappings":";;;;;;;;;;;;;GAiBMA,MAAAA,eAAiBA,CAACC,IAAM,GAAIC,KAAO,eAEvCC,GAAGF,IAAKE,GAAGC,OAAOC,IAAIC,OACtBH,GAAGD,KAAMC,GAAGC,OAAOG,IAAGC,OAAS,CAAE,wBAAyB,kBAAmB,gBAAiB,aAAcC,SAASD,UAErH,UAAWE,YAAc,YACvB,OAAOC,MAAMV,KAAKW,iBAAiB,UAEnC,OAAO,IAAIF,WAAYG,gBAAgBZ,IAAKC,MAAMY,KAAKC,UACzD"}