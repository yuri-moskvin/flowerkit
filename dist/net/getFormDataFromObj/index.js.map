{"version":3,"file":"index.js","sources":["../../../src/net/getFormDataFromObj/index.js"],"sourcesContent":["import ow from \"ow\";\r\n\r\nconst setItemFn =  (name = \"\", value, fd = new FormData()) => {\r\n  fd.set(name, value?.toString() ?? \"\");\r\n};\r\n\r\n/**\r\n * Gets FormData from object\r\n * @param obj{Object=} - source object\r\n * @param fd{FormData=} - FormData instance\r\n * @param setItem{Function=} - callback for each object key/value pair\r\n * @return {FormData}\r\n * @example\r\n * // How to convert object to FormData interface?\r\n * const obj = {\r\n *   test: 123,\r\n *   boo: \"foo\"\r\n * }\r\n *\r\n * getFormDataFromObj(obj); // FormData with \"test\" and \"boo\" keys\r\n *\r\n * // With custom callback\r\n * getFormDataFromObj(obj, new FormData(), (name, value, fd) => {\r\n *   if(name !== \"test\") {\r\n *      fd.set(name, value);\r\n *   }\r\n * }); // FormData only with \"boo\" key\r\n */\r\nconst getFormDataFromObj = (obj = {}, fd = new FormData(), setItem = setItemFn) => {\r\n\r\n  ow(obj, ow.object);\r\n\r\n  ow(fd, ow.object.validate(value => ({\r\n    validator: value instanceof FormData,\r\n    message: `Value must be instance of FormData`\r\n  })));\r\n\r\n  ow(setItem, ow.function);\r\n\r\n  Object.entries(obj)\r\n    .forEach(([ name, value ]) => {\r\n      setItem(name, value, fd);\r\n    });\r\n\r\n  return fd;\r\n};\r\n\r\nexport {\r\n  getFormDataFromObj\r\n};\r\n"],"names":["setItemFn","name","value","fd","FormData","set","toString","getFormDataFromObj","obj","setItem","ow","object","validate","validator","message","function","Object","entries","forEach"],"mappings":"mBAEA,MAAMA,UAAaA,CAACC,KAAO,GAAIC,MAAOC,GAAK,IAAIC,YAC7CD,GAAGE,IAAIJ,KAAMC,OAAOI,YAAc,GAAG;;;;;;;;;;;;;;;;;;;;;;GAyBvC,MAAMC,mBAAqBA,CAACC,IAAM,GAAIL,GAAK,IAAIC,SAAYK,QAAUT,aAEnEU,GAAGF,IAAKE,GAAGC,QAEXD,GAAGP,GAAIO,GAAGC,OAAOC,UAASV,QAAU,CAClCW,UAAWX,iBAAiBE,SAC5BU,QAAU,0CAGZJ,GAAGD,QAASC,GAAGK,UAEfC,OAAOC,QAAQT,KACZU,SAAQ,EAAGjB,KAAMC,UAChBO,QAAQR,KAAMC,MAAOC,GAAG,IAG5B,OAAOA,EAAE"}