{"version":3,"file":"index.js","sources":["../../../src/fn/getCurryFn/index.js"],"sourcesContent":["import ow from \"ow\";\r\n\r\n\r\n/**\r\n * Evaluating functions with multiple arguments and decomposing them into a sequence of functions with a specific number of arguments\r\n * @param fn{Function} - source function\r\n * @param arity{Number=} - arity of function\r\n * @return {Function}\r\n * @example\r\n * // How to curry a function?\r\n *\r\n * function getSum(a, b) {\r\n *   return a + b;\r\n * }\r\n *\r\n * const getCurriedSum = getCurryFn(getSum);\r\n * curriedSum(1)(2); // 3\r\n */\r\nconst getCurryFn = (fn, arity = fn.length) => {\r\n\r\n  ow(fn, ow.function);\r\n  ow(arity, ow.number);\r\n\r\n  return (function nextCurry(previousArguments) {\r\n    return function curried(nextArgument) {\r\n      const args = [ ...previousArguments, nextArgument ];\r\n      if (args.length >= arity) {\r\n        return fn(...args);\r\n      } else {\r\n        return nextCurry(args);\r\n      }\r\n    };\r\n  })([]);\r\n};\r\n\r\nexport {\r\n  getCurryFn\r\n};\r\n"],"names":["getCurryFn","fn","arity","length","ow","function","number","nextCurry","previousArguments","curried","nextArgument","args"],"mappings":";;;;;;;;;;;;;;;GAkBMA,MAAAA,WAAaA,CAACC,GAAIC,MAAQD,GAAGE,UAEjCC,GAAGH,GAAIG,GAAGC,UACVD,GAAGF,MAAOE,GAAGE,QAEb,OAAQ,SAASC,UAAUC,mBACzB,OAAO,SAASC,QAAQC,cACtB,MAAMC,KAAO,IAAKH,kBAAmBE,cACrC,GAAIC,KAAKR,QAAUD,MACjB,OAAOD,MAAMU,WAEb,OAAOJ,UAAUI,KAEpB,CACF,CATO,CASL,GAAG"}