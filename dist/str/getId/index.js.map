{"version":3,"file":"index.js","sources":["../../../src/str/getId/index.js"],"sourcesContent":["import ow from \"ow\";\r\nimport { getRandomIntFromInterval } from \"../../num/getRandomIntFromInterval/index.js\";\r\n\r\n/**\r\n * Gets unique string ID.\r\n * @param length{Number=} - length of ID\r\n * @return {string}\r\n * @example\r\n * // How to generate unique string ID?\r\n * const uniqueId = getId(100);\r\n * console.log(uniqueId.length); // 100\r\n */\r\nconst getId = (length = getRandomIntFromInterval(8, 16)) => {\r\n\r\n  ow(length, ow.optional.number.validate(value => ({\r\n    validator: value > 0 && value !== Infinity,\r\n    message: () => `Expected value to be greater than 0 and not to be Infinity, got ${value}`\r\n  })));\r\n\r\n  const str = new Array(3)\r\n    .fill(\"\")\r\n    .map(() => Math.random().toString(36).substring(2));\r\n\r\n  const counter = Math.floor(Math.random() * 10 ** 8);\r\n\r\n  return `${str.join(\"\")}}${counter}`.substring(0, length);\r\n};\r\n\r\nexport {\r\n  getId\r\n};\r\n"],"names":["getId","length","getRandomIntFromInterval","ow","optional","number","validate","value","validator","Infinity","message","str","Array","fill","map","Math","random","toString","substring","counter","floor","join"],"mappings":";;;;;;;;;GAYMA,MAAAA,MAAQA,CAACC,OAASC,yBAAyB,EAAG,OAElDC,GAAGF,OAAQE,GAAGC,SAASC,OAAOC,UAASC,QAAU,CAC/CC,UAAWD,MAAQ,GAAKA,QAAUE,SAClCC,QAASA,IAAO,mEAAkEH,aAGpF,MAAMI,IAAM,IAAIC,MAAM,GACnBC,KAAK,IACLC,KAAI,IAAMC,KAAKC,SAASC,SAAS,IAAIC,UAAU,KAElD,MAAMC,QAAUJ,KAAKK,MAAML,KAAKC,SAAW,IAAM,GAEjD,MAAQ,GAAEL,IAAIU,KAAK,OAAOF,UAAUD,UAAU,EAAGjB,OAAO"}