{"version":3,"file":"index.js","sources":["../../../src/obj/getMergedObj/index.js"],"sourcesContent":["import ow from \"ow\";\r\n\r\n/**\r\n * Gets one deeply merged object from two objects\r\n * @param target{Object=} - target object\r\n * @param source{Object=} - source object\r\n * @param options{Object=} - merge options\r\n * @param options.isMergeArrays{Boolean=} - concat nested arrays or use target value\r\n * @return {Object}\r\n * @example\r\n * // How to deeply merge two objects?\r\n * const targetObj = {\r\n *   first: [ \"foo\" ],\r\n * }\r\n * const sourceObj = {\r\n *   first: [ \"moo\" ],\r\n *   boo: 12\r\n * }\r\n * getMergedObj(targetObj, sourceObj) // => { first: [ \"foo\", \"moo\" ], boo: 12 }\r\n */\r\nconst getMergedObj = (target = {}, source = {}, options = {}) => {\r\n\r\n  ow(options, ow.object);\r\n\r\n  const settings = {\r\n    isMergeArrays: true,\r\n    ...options,\r\n  };\r\n\r\n  target = ((obj) => {\r\n    let cloneObj;\r\n    try {\r\n      cloneObj = JSON.parse(JSON.stringify(obj));\r\n      // eslint-disable-next-line no-unused-vars\r\n    } catch (err) {\r\n      cloneObj = Object.assign({}, obj);\r\n    }\r\n    return cloneObj;\r\n  })(target);\r\n\r\n  const isObject = (obj) => obj && typeof obj === \"object\";\r\n\r\n  if (!isObject(target) || !isObject(source)) {\r\n    return source;\r\n  }\r\n\r\n  Object.keys(source).forEach(key => {\r\n    const targetValue = target[key];\r\n    const sourceValue = source[key];\r\n    switch (true) {\r\n      case Array.isArray(targetValue) && Array.isArray(sourceValue): {\r\n        target[key] = settings.isMergeArrays ? targetValue.concat(sourceValue) : targetValue;\r\n        break;\r\n      }\r\n      case isObject(targetValue) && isObject(sourceValue): {\r\n        target[key] = getMergedObj(Object.assign({}, targetValue), sourceValue);\r\n        break;\r\n      }\r\n      default:\r\n        target[key] = sourceValue;\r\n    }\r\n  });\r\n\r\n  return target;\r\n};\r\n\r\nexport {\r\n  getMergedObj\r\n};\r\n"],"names":["getMergedObj","target","source","options","ow","object","settings","isMergeArrays","obj","cloneObj","JSON","parse","stringify","err","Object","assign","isObject","keys","forEach","key","targetValue","sourceValue","Array","isArray","concat"],"mappings":";;;;;;;;;;;;;;;;;;GAoBA,MAAMA,aAAeA,CAACC,OAAS,CAAE,EAAEC,OAAS,CAAE,EAAEC,QAAU,MAExDC,GAAGD,QAASC,GAAGC,QAEf,MAAMC,SAAW,CACfC,cAAe,QACZJ,SAGLF,OAAS,CAAEO,MACT,IAAIC,SACJ,IACEA,SAAWC,KAAKC,MAAMD,KAAKE,UAAUJ;0CAEtC;CAAC,MAAOK,KACPJ,SAAWK,OAAOC,OAAO,CAAA,EAAIP,IAC/B,CACA,OAAOC,QACR,EATQ,CASNR,QAEH,MAAMe,SAAYR,KAAQA,YAAcA,MAAQ,SAEhD,IAAKQ,SAASf,UAAYe,SAASd,QACjC,OAAOA,OAGTY,OAAOG,KAAKf,QAAQgB,SAAQC,MAC1B,MAAMC,YAAcnB,OAAOkB,KAC3B,MAAME,YAAcnB,OAAOiB,KAC3B,OAAQ,MACN,KAAKG,MAAMC,QAAQH,cAAgBE,MAAMC,QAAQF,aAC/CpB,OAAOkB,KAAOb,SAASC,cAAgBa,YAAYI,OAAOH,aAAeD,YACzE,MAEF,KAAKJ,SAASI,cAAgBJ,SAASK,aACrCpB,OAAOkB,KAAOnB,aAAac,OAAOC,OAAO,CAAE,EAAEK,aAAcC,aAC3D,MAEF,QACEpB,OAAOkB,KAAOE,YAClB,IAGF,OAAOpB,MAAM"}