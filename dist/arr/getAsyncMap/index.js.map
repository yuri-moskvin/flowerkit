{"version":3,"file":"index.js","sources":["../../../src/arr/getAsyncMap/index.js"],"sourcesContent":["import ow from \"ow\";\r\n\r\n/**\r\n * Gets aggregated result of async operation for each element of given Array\r\n * @param arr{Array} - source array\r\n * @param callback{Function} - callback function\r\n * @return {Promise}\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n * @example\r\n * // How to call API for each element of array and return result?\r\n * const myAPIFn = (item, index, arr) => Promise.resolve(\"success\" + item);\r\n * const array = [ 1, 2, 3 ];\r\n * const result = await getAsyncMap(array, myAPIFn);\r\n * console.log(result); // => [ \"success1\", \"success2, \"success3\" ]\r\n */\r\nconst getAsyncMap = async (arr, callback) => {\r\n\r\n  ow(arr, ow.array);\r\n  ow(callback, ow.function);\r\n\r\n  if (arr.length) {\r\n    return await Promise.all(arr.map(async (item, index, array) => {\r\n      try {\r\n        return await callback(item, index, array);\r\n      } catch (err) {\r\n        return Promise.reject(err);\r\n      }\r\n    }));\r\n  } else {\r\n    return Promise.reject(arr);\r\n  }\r\n};\r\n\r\nexport {\r\n  getAsyncMap\r\n};\r\n"],"names":["getAsyncMap","async","arr","callback","ow","array","function","length","Promise","all","map","item","index","err","reject"],"mappings":";;;;;;;;;;;;;GAeA,MAAMA,YAAcC,MAAOC,IAAKC,YAE9BC,GAAGF,IAAKE,GAAGC,OACXD,GAAGD,SAAUC,GAAGE,UAEhB,GAAIJ,IAAIK,OACN,aAAaC,QAAQC,IAAIP,IAAIQ,KAAIT,MAAOU,KAAMC,MAAOP,SACnD,IACE,aAAaF,SAASQ,KAAMC,MAAOP,MACpC,CAAC,MAAOQ,KACP,OAAOL,QAAQM,OAAOD,IACxB,WAGF,OAAOL,QAAQM,OAAOZ,IACxB"}